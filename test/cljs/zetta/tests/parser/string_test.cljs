;; This file was generated with lein-dalap from
;;
;; test/clj/zetta/tests/parser/string_test.clj @ Mon Aug 05 23:18:07 PDT 2013
;;
(ns zetta.tests.parser.string-test (:require-macros [buster-cljs.macros :refer [deftest it is]]) (:require [goog.string :as _gstring] [zetta.parser.core :refer [parse-once done? failure?]] [zetta.parser.string :as p]))
(deftest string-parser (it "take-with" (let [result (parse-once (p/take-with 4 (partial every? (fn* [p1__1316#] (goog.string.isNumeric p1__1316#)))) "12345")] (is (= "1234" (:result result))))) (it "take-with no initial match" (let [result (parse-once (p/take-with 4 (partial every? (fn* [p1__1318#] (goog.string.isNumeric p1__1318#)))) "12ab3")] (is (failure? result)))) (it "take" (let [result (parse-once (p/take 5) "12ab hell")] (is (= "12ab " (:result result))))) (it "take no initial match" (let [result (parse-once (p/take 5) "12ab")] (is (failure? result)))) (it "take-while" (let [result (parse-once (p/take-while (fn* [p1__1320#] (goog.string.isAlpha p1__1320#))) "this is just a test")] (is (= "this" (:result result))) (is (= (seq " is just a test") (:remainder result))))) (it "take-while no initial match" (let [result (parse-once (p/take-while (fn* [p1__1322#] (goog.string.isAlpha p1__1322#))) " this is just a test")] (is (done? result)) (is (= "" (:result result))) (is (= (seq " this is just a test") (:remainder result))))) (it "take-till" (let [result (parse-once (p/take-till (fn* [p1__1324#] (= p1__1324# \space))) "this is just a test")] (is (done? result)) (is (= "this" (:result result))) (is (= (seq " is just a test") (:remainder result))))) (it "take-till no initial match" (let [result (parse-once (p/take-till (fn* [p1__1325#] (= p1__1325# \space))) " this is just a test")] (is (done? result)) (is (= "" (:result result))) (is (= (seq " this is just a test") (:remainder result))))) (it "take-rest" (let [result (parse-once p/take-rest "hello world")] (is (done? result)) (is (= ["hello world"] (:result result))))) (it "take-while1" (let [result (parse-once (p/take-while1 (fn* [p1__1326#] (goog.string.isAlpha p1__1326#))) "this is just a test")] (is (= "this" (:result result))) (is (= (seq " is just a test") (:remainder result))))) (it "take-while1 no initial match" (let [result (parse-once (p/take-while1 (fn* [p1__1328#] (goog.string.isAlpha p1__1328#))) " this is just a test")] (is (failure? result)))))